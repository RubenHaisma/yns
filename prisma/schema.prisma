generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WaitlistUser {
  id                    String   @id @default(cuid())
  email                 String   @unique
  name                  String?
  city                  String?
  phone                 String?
  favoriteTeam          String?
  preferredDestinations String?
  source                String?
  referralCode          String?
  isVerified            Boolean  @default(false)
  position              Int      @unique @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("waitlist_users")
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter_subscribers")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("new")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

model Booking {
  id                    String    @id @default(cuid())
  bookingId             String    @unique
  email                 String
  name                  String
  phone                 String?
  package               String
  date                  DateTime
  travelers             Int
  preferences           String?
  totalPrice            String
  status                String    @default("pending")
  paymentStatus         String    @default("pending")
  stripePaymentIntentId String?
  destination           String?
  revealedAt            DateTime?
  selectedDestinationId String?   // Reference to the selected destination
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  destinationSuggestions DestinationSuggestion[]

  @@map("bookings")
}

model Destination {
  id          String   @id @default(cuid())
  name        String
  city        String
  country     String
  league      String
  stadium     String
  capacity    Int?
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  difficulty  String   @default("medium")
  season      String?
  website     String?
  airport     String?  // Nearest airport
  lastFlightCheck DateTime? // Last time flight prices were checked
  avgFlightPrice  Float?    // Average flight price from AMS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  destinationSuggestions DestinationSuggestion[]

  @@unique([name, league, country])
  @@map("destinations")
}

model DestinationSuggestion {
  id            String   @id @default(cuid())
  bookingId     String
  destinationId String
  flightPrice   Float?
  currency      String   @default("EUR")
  reason        String
  isSelected    Boolean  @default(false)
  adminNotes    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  booking     Booking     @relation(fields: [bookingId], references: [bookingId])
  destination Destination @relation(fields: [destinationId], references: [id])

  flightOptions FlightOption[]

  @@map("destination_suggestions")
}

model FlightOption {
  id                   String   @id @default(cuid())
  destinationSuggestionId String
  price                Float
  currency             String   @default("EUR")
  airline              String
  flightNumber         String?
  duration             Int?
  stops                Int?
  departureTime        DateTime?
  arrivalTime          DateTime?
  bookingToken         String?
  originAirport        String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  destinationSuggestion DestinationSuggestion @relation(fields: [destinationSuggestionId], references: [id])

  @@map("flight_options")
}
